// +build  solaris

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package disk

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF65a6882DecodeGithubComShirouGopsutilDisk(in *jlexer.Lexer, out *_zoneVFSKStatFrames) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(_zoneVFSKStatFrames, 0, 1)
			} else {
				*out = _zoneVFSKStatFrames{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 _zoneVFSKStatFrame
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF65a6882EncodeGithubComShirouGopsutilDisk(out *jwriter.Writer, in _zoneVFSKStatFrames) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v _zoneVFSKStatFrames) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF65a6882EncodeGithubComShirouGopsutilDisk(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v _zoneVFSKStatFrames) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF65a6882EncodeGithubComShirouGopsutilDisk(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *_zoneVFSKStatFrames) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF65a6882DecodeGithubComShirouGopsutilDisk(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *_zoneVFSKStatFrames) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF65a6882DecodeGithubComShirouGopsutilDisk(l, v)
}
func easyjsonF65a6882DecodeGithubComShirouGopsutilDisk1(in *jlexer.Lexer, out *_zoneVFSKStatFrame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instance":
			out.Instance = int(in.Int())
		case "data":
			easyjsonF65a6882DecodeGithubComShirouGopsutilDisk2(in, &out.Data)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF65a6882EncodeGithubComShirouGopsutilDisk1(out *jwriter.Writer, in _zoneVFSKStatFrame) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"instance\":")
	out.Int(int(in.Instance))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	easyjsonF65a6882EncodeGithubComShirouGopsutilDisk2(out, in.Data)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v _zoneVFSKStatFrame) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF65a6882EncodeGithubComShirouGopsutilDisk1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v _zoneVFSKStatFrame) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF65a6882EncodeGithubComShirouGopsutilDisk1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *_zoneVFSKStatFrame) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF65a6882DecodeGithubComShirouGopsutilDisk1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *_zoneVFSKStatFrame) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF65a6882DecodeGithubComShirouGopsutilDisk1(l, v)
}
func easyjsonF65a6882DecodeGithubComShirouGopsutilDisk2(in *jlexer.Lexer, out *IOCountersZoneStat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "zonename":
			out.Name = string(in.String())
		case "10ms_ops":
			out.Num10msOps = uint64(in.Uint64())
		case "100ms_ops":
			out.Num100msOps = uint64(in.Uint64())
		case "1s_ops":
			out.Num1sOps = uint64(in.Uint64())
		case "10s_ops":
			out.Num10sOps = uint64(in.Uint64())
		case "delay_cnt":
			out.DelayCount = uint64(in.Uint64())
		case "delay_time":
			out.DelayTime = time.Duration(in.Int64())
		case "nread":
			out.BytesRead = uint64(in.Uint64())
		case "nwritten":
			out.BytesWritten = uint64(in.Uint64())
		case "reads":
			out.NumReadOps = uint64(in.Uint64())
		case "writes":
			out.NumWriteOps = uint64(in.Uint64())
		case "rcnt":
			out.NumRunningIO = uint64(in.Uint64())
		case "rtime":
			out.TimeIORunning = time.Duration(in.Int64())
		case "wcnt":
			out.NumQueuedIO = uint64(in.Uint64())
		case "wtime":
			out.TimeIOQueued = time.Duration(in.Int64())
		case "rlentime":
			out.RiemannSumRunning = uint64(in.Uint64())
		case "wlentime":
			out.RiemannSumQueued = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF65a6882EncodeGithubComShirouGopsutilDisk2(out *jwriter.Writer, in IOCountersZoneStat) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"zonename\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"10ms_ops\":")
	out.Uint64(uint64(in.Num10msOps))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"100ms_ops\":")
	out.Uint64(uint64(in.Num100msOps))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"1s_ops\":")
	out.Uint64(uint64(in.Num1sOps))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"10s_ops\":")
	out.Uint64(uint64(in.Num10sOps))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"delay_cnt\":")
	out.Uint64(uint64(in.DelayCount))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"delay_time\":")
	out.Int64(int64(in.DelayTime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nread\":")
	out.Uint64(uint64(in.BytesRead))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nwritten\":")
	out.Uint64(uint64(in.BytesWritten))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"reads\":")
	out.Uint64(uint64(in.NumReadOps))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"writes\":")
	out.Uint64(uint64(in.NumWriteOps))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rcnt\":")
	out.Uint64(uint64(in.NumRunningIO))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rtime\":")
	out.Int64(int64(in.TimeIORunning))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"wcnt\":")
	out.Uint64(uint64(in.NumQueuedIO))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"wtime\":")
	out.Int64(int64(in.TimeIOQueued))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rlentime\":")
	out.Uint64(uint64(in.RiemannSumRunning))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"wlentime\":")
	out.Uint64(uint64(in.RiemannSumQueued))
	out.RawByte('}')
}
