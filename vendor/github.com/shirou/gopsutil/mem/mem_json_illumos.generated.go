// +build  solaris

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mem

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson25f3d590DecodeGithubComShirouGopsutilMem(in *jlexer.Lexer, out *_memoryCapKStatFrames) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(_memoryCapKStatFrames, 0, 1)
			} else {
				*out = _memoryCapKStatFrames{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 _memoryCapKStatFrame
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson25f3d590EncodeGithubComShirouGopsutilMem(out *jwriter.Writer, in _memoryCapKStatFrames) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v _memoryCapKStatFrames) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson25f3d590EncodeGithubComShirouGopsutilMem(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v _memoryCapKStatFrames) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson25f3d590EncodeGithubComShirouGopsutilMem(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *_memoryCapKStatFrames) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson25f3d590DecodeGithubComShirouGopsutilMem(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *_memoryCapKStatFrames) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson25f3d590DecodeGithubComShirouGopsutilMem(l, v)
}
func easyjson25f3d590DecodeGithubComShirouGopsutilMem1(in *jlexer.Lexer, out *_memoryCapKStatFrame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instance":
			out.Instance = int(in.Int())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson25f3d590EncodeGithubComShirouGopsutilMem1(out *jwriter.Writer, in _memoryCapKStatFrame) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"instance\":")
	out.Int(int(in.Instance))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	(in.Data).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v _memoryCapKStatFrame) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson25f3d590EncodeGithubComShirouGopsutilMem1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v _memoryCapKStatFrame) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson25f3d590EncodeGithubComShirouGopsutilMem1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *_memoryCapKStatFrame) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson25f3d590DecodeGithubComShirouGopsutilMem1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *_memoryCapKStatFrame) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson25f3d590DecodeGithubComShirouGopsutilMem1(l, v)
}
func easyjson25f3d590DecodeGithubComShirouGopsutilMem2(in *jlexer.Lexer, out *VirtualMemoryZoneStat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "zonename":
			out.Name = string(in.String())
		case "anon_alloc_fail":
			out.AnonAllocFail = uint64(in.Uint64())
		case "anonpgin":
			out.AnonPageIn = uint64(in.Uint64())
		case "class":
			out.Class = string(in.String())
		case "execpgin":
			out.ExecPageIn = uint64(in.Uint64())
		case "fspgin":
			out.FilesystemPageIn = uint64(in.Uint64())
		case "n_pf_throttle":
			out.NPFThrottle = uint64(in.Uint64())
		case "n_pf_throttle_usec":
			out.NPFThrottleTime = time.Duration(in.Int64())
		case "nover":
			out.NumOver = uint64(in.Uint64())
		case "pagedout":
			out.PagedOut = uint64(in.Uint64())
		case "pgpgin":
			out.PagesPagedIn = uint64(in.Uint64())
		case "physcap":
			out.PhysicalCap = uint64(in.Uint64())
		case "rss":
			out.RSS = uint64(in.Uint64())
		case "swap":
			out.Swap = uint64(in.Uint64())
		case "swapcap":
			out.SwapCap = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson25f3d590EncodeGithubComShirouGopsutilMem2(out *jwriter.Writer, in VirtualMemoryZoneStat) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"zonename\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"anon_alloc_fail\":")
	out.Uint64(uint64(in.AnonAllocFail))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"anonpgin\":")
	out.Uint64(uint64(in.AnonPageIn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"class\":")
	out.String(string(in.Class))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"execpgin\":")
	out.Uint64(uint64(in.ExecPageIn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fspgin\":")
	out.Uint64(uint64(in.FilesystemPageIn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"n_pf_throttle\":")
	out.Uint64(uint64(in.NPFThrottle))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"n_pf_throttle_usec\":")
	out.Int64(int64(in.NPFThrottleTime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nover\":")
	out.Uint64(uint64(in.NumOver))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pagedout\":")
	out.Uint64(uint64(in.PagedOut))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgpgin\":")
	out.Uint64(uint64(in.PagesPagedIn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"physcap\":")
	out.Uint64(uint64(in.PhysicalCap))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rss\":")
	out.Uint64(uint64(in.RSS))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"swap\":")
	out.Uint64(uint64(in.Swap))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"swapcap\":")
	out.Uint64(uint64(in.SwapCap))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VirtualMemoryZoneStat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson25f3d590EncodeGithubComShirouGopsutilMem2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VirtualMemoryZoneStat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson25f3d590EncodeGithubComShirouGopsutilMem2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VirtualMemoryZoneStat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson25f3d590DecodeGithubComShirouGopsutilMem2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VirtualMemoryZoneStat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson25f3d590DecodeGithubComShirouGopsutilMem2(l, v)
}
