// +build  solaris

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package cpu

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1b73ba79DecodeGithubComShirouGopsutilCpu(in *jlexer.Lexer, out *_zonesKStatFrames) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(_zonesKStatFrames, 0, 1)
			} else {
				*out = _zonesKStatFrames{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 _zonesKStatFrame
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b73ba79EncodeGithubComShirouGopsutilCpu(out *jwriter.Writer, in _zonesKStatFrames) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v _zonesKStatFrames) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v _zonesKStatFrames) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *_zonesKStatFrames) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *_zonesKStatFrames) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu(l, v)
}
func easyjson1b73ba79DecodeGithubComShirouGopsutilCpu1(in *jlexer.Lexer, out *_zonesKStatFrame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instance":
			out.Instance = uint(in.Uint())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b73ba79EncodeGithubComShirouGopsutilCpu1(out *jwriter.Writer, in _zonesKStatFrame) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"instance\":")
	out.Uint(uint(in.Instance))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	(in.Data).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v _zonesKStatFrame) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v _zonesKStatFrame) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *_zonesKStatFrame) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *_zonesKStatFrame) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu1(l, v)
}
func easyjson1b73ba79DecodeGithubComShirouGopsutilCpu2(in *jlexer.Lexer, out *_cpuVMKStatFrames) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(_cpuVMKStatFrames, 0, 1)
			} else {
				*out = _cpuVMKStatFrames{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 _cpuVMKStatFrame
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b73ba79EncodeGithubComShirouGopsutilCpu2(out *jwriter.Writer, in _cpuVMKStatFrames) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v _cpuVMKStatFrames) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v _cpuVMKStatFrames) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *_cpuVMKStatFrames) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *_cpuVMKStatFrames) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu2(l, v)
}
func easyjson1b73ba79DecodeGithubComShirouGopsutilCpu3(in *jlexer.Lexer, out *_cpuVMKStatFrame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instance":
			out.Instance = uint(in.Uint())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b73ba79EncodeGithubComShirouGopsutilCpu3(out *jwriter.Writer, in _cpuVMKStatFrame) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"instance\":")
	out.Uint(uint(in.Instance))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	(in.Data).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v _cpuVMKStatFrame) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v _cpuVMKStatFrame) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *_cpuVMKStatFrame) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *_cpuVMKStatFrame) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu3(l, v)
}
func easyjson1b73ba79DecodeGithubComShirouGopsutilCpu4(in *jlexer.Lexer, out *_cpuSysKStatFrames) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(_cpuSysKStatFrames, 0, 1)
			} else {
				*out = _cpuSysKStatFrames{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 _cpuSysKStatFrame
			(v7).UnmarshalEasyJSON(in)
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b73ba79EncodeGithubComShirouGopsutilCpu4(out *jwriter.Writer, in _cpuSysKStatFrames) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			(v9).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v _cpuSysKStatFrames) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v _cpuSysKStatFrames) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *_cpuSysKStatFrames) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *_cpuSysKStatFrames) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu4(l, v)
}
func easyjson1b73ba79DecodeGithubComShirouGopsutilCpu5(in *jlexer.Lexer, out *_cpuSysKStatFrame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instance":
			out.Instance = uint(in.Uint())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b73ba79EncodeGithubComShirouGopsutilCpu5(out *jwriter.Writer, in _cpuSysKStatFrame) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"instance\":")
	out.Uint(uint(in.Instance))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	(in.Data).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v _cpuSysKStatFrame) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v _cpuSysKStatFrame) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *_cpuSysKStatFrame) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *_cpuSysKStatFrame) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu5(l, v)
}
func easyjson1b73ba79DecodeGithubComShirouGopsutilCpu6(in *jlexer.Lexer, out *_cpuInterruptKStatFrames) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(_cpuInterruptKStatFrames, 0, 1)
			} else {
				*out = _cpuInterruptKStatFrames{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 _cpuInterruptKStatFrame
			(v10).UnmarshalEasyJSON(in)
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b73ba79EncodeGithubComShirouGopsutilCpu6(out *jwriter.Writer, in _cpuInterruptKStatFrames) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			(v12).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v _cpuInterruptKStatFrames) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v _cpuInterruptKStatFrames) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *_cpuInterruptKStatFrames) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *_cpuInterruptKStatFrames) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu6(l, v)
}
func easyjson1b73ba79DecodeGithubComShirouGopsutilCpu7(in *jlexer.Lexer, out *_cpuInterruptKStatFrame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instance":
			out.Instance = uint(in.Uint())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b73ba79EncodeGithubComShirouGopsutilCpu7(out *jwriter.Writer, in _cpuInterruptKStatFrame) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"instance\":")
	out.Uint(uint(in.Instance))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	(in.Data).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v _cpuInterruptKStatFrame) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v _cpuInterruptKStatFrame) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *_cpuInterruptKStatFrame) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *_cpuInterruptKStatFrame) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu7(l, v)
}
func easyjson1b73ba79DecodeGithubComShirouGopsutilCpu8(in *jlexer.Lexer, out *_TimesZoneStat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "boot_time":
			out.BootTime = int64(in.Int64())
		case "zonename":
			out.Name = string(in.String())
		case "avenrun_1min":
			out.AvgRunQueue1Min = uint32(in.Uint32())
		case "avenrun_5min":
			out.AvgRunQueue5Min = uint32(in.Uint32())
		case "avenrun_15min":
			out.AvgRunQueue15Min = uint32(in.Uint32())
		case "crtime":
			out.CreateTime = float64(in.Float64())
		case "forkfail_cap":
			out.ForkFailCap = uint64(in.Uint64())
		case "forkfail_misc":
			out.ForkFailMisc = uint64(in.Uint64())
		case "forkfail_nomem":
			out.ForkFailNoMem = uint64(in.Uint64())
		case "forkfail_noproc":
			out.ForkFailNoProc = uint64(in.Uint64())
		case "init_pid":
			out.InitPID = uint(in.Uint())
		case "mapfail_seglim":
			out.MapFailSegLimit = uint(in.Uint())
		case "nested_interp":
			out.NestedInterp = uint(in.Uint())
		case "nsec_sys":
			out.SysTime = time.Duration(in.Int64())
		case "nsec_user":
			out.UserTime = time.Duration(in.Int64())
		case "nsec_waitrq":
			out.WaitIRQTime = time.Duration(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b73ba79EncodeGithubComShirouGopsutilCpu8(out *jwriter.Writer, in _TimesZoneStat) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"boot_time\":")
	out.Int64(int64(in.BootTime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"zonename\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"avenrun_1min\":")
	out.Uint32(uint32(in.AvgRunQueue1Min))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"avenrun_5min\":")
	out.Uint32(uint32(in.AvgRunQueue5Min))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"avenrun_15min\":")
	out.Uint32(uint32(in.AvgRunQueue15Min))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"crtime\":")
	out.Float64(float64(in.CreateTime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"forkfail_cap\":")
	out.Uint64(uint64(in.ForkFailCap))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"forkfail_misc\":")
	out.Uint64(uint64(in.ForkFailMisc))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"forkfail_nomem\":")
	out.Uint64(uint64(in.ForkFailNoMem))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"forkfail_noproc\":")
	out.Uint64(uint64(in.ForkFailNoProc))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"init_pid\":")
	out.Uint(uint(in.InitPID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mapfail_seglim\":")
	out.Uint(uint(in.MapFailSegLimit))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nested_interp\":")
	out.Uint(uint(in.NestedInterp))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nsec_sys\":")
	out.Int64(int64(in.SysTime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nsec_user\":")
	out.Int64(int64(in.UserTime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nsec_waitrq\":")
	out.Int64(int64(in.WaitIRQTime))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v _TimesZoneStat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v _TimesZoneStat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *_TimesZoneStat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *_TimesZoneStat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu8(l, v)
}
func easyjson1b73ba79DecodeGithubComShirouGopsutilCpu9(in *jlexer.Lexer, out *_TimesCPUStatInterrupt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CPUID":
			out.CPUID = uint(in.Uint())
		case "level-1-count":
			out.Level1Count = uint64(in.Uint64())
		case "level-1-time":
			out.Level1Time = time.Duration(in.Int64())
		case "level-2-count":
			out.Level2Count = uint64(in.Uint64())
		case "level-2-time":
			out.Level2Time = time.Duration(in.Int64())
		case "level-3-count":
			out.Level3Count = uint64(in.Uint64())
		case "level-3-time":
			out.Level3Time = time.Duration(in.Int64())
		case "level-4-count":
			out.Level4Count = uint64(in.Uint64())
		case "level-4-time":
			out.Level4Time = time.Duration(in.Int64())
		case "level-5-count":
			out.Level5Count = uint64(in.Uint64())
		case "level-5-time":
			out.Level5Time = time.Duration(in.Int64())
		case "level-6-count":
			out.Level6Count = uint64(in.Uint64())
		case "level-6-time":
			out.Level6Time = time.Duration(in.Int64())
		case "level-7-count":
			out.Level7Count = uint64(in.Uint64())
		case "level-7-time":
			out.Level7Time = time.Duration(in.Int64())
		case "level-8-count":
			out.Level8Count = uint64(in.Uint64())
		case "level-8-time":
			out.Level8Time = time.Duration(in.Int64())
		case "level-9-count":
			out.Level9Count = uint64(in.Uint64())
		case "level-9-time":
			out.Level9Time = time.Duration(in.Int64())
		case "level-10-count":
			out.Level10Count = uint64(in.Uint64())
		case "level-10-time":
			out.Level10Time = time.Duration(in.Int64())
		case "level-11-count":
			out.Level11Count = uint64(in.Uint64())
		case "level-11-time":
			out.Level11Time = time.Duration(in.Int64())
		case "level-12-count":
			out.Level12Count = uint64(in.Uint64())
		case "level-12-time":
			out.Level12Time = time.Duration(in.Int64())
		case "level-13-count":
			out.Level13Count = uint64(in.Uint64())
		case "level-13-time":
			out.Level13Time = time.Duration(in.Int64())
		case "level-14-count":
			out.Level14Count = uint64(in.Uint64())
		case "level-14-time":
			out.Level14Time = time.Duration(in.Int64())
		case "level-15-count":
			out.Level15Count = uint64(in.Uint64())
		case "level-15-time":
			out.Level15Time = time.Duration(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b73ba79EncodeGithubComShirouGopsutilCpu9(out *jwriter.Writer, in _TimesCPUStatInterrupt) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"CPUID\":")
	out.Uint(uint(in.CPUID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-1-count\":")
	out.Uint64(uint64(in.Level1Count))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-1-time\":")
	out.Int64(int64(in.Level1Time))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-2-count\":")
	out.Uint64(uint64(in.Level2Count))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-2-time\":")
	out.Int64(int64(in.Level2Time))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-3-count\":")
	out.Uint64(uint64(in.Level3Count))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-3-time\":")
	out.Int64(int64(in.Level3Time))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-4-count\":")
	out.Uint64(uint64(in.Level4Count))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-4-time\":")
	out.Int64(int64(in.Level4Time))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-5-count\":")
	out.Uint64(uint64(in.Level5Count))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-5-time\":")
	out.Int64(int64(in.Level5Time))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-6-count\":")
	out.Uint64(uint64(in.Level6Count))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-6-time\":")
	out.Int64(int64(in.Level6Time))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-7-count\":")
	out.Uint64(uint64(in.Level7Count))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-7-time\":")
	out.Int64(int64(in.Level7Time))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-8-count\":")
	out.Uint64(uint64(in.Level8Count))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-8-time\":")
	out.Int64(int64(in.Level8Time))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-9-count\":")
	out.Uint64(uint64(in.Level9Count))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-9-time\":")
	out.Int64(int64(in.Level9Time))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-10-count\":")
	out.Uint64(uint64(in.Level10Count))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-10-time\":")
	out.Int64(int64(in.Level10Time))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-11-count\":")
	out.Uint64(uint64(in.Level11Count))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-11-time\":")
	out.Int64(int64(in.Level11Time))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-12-count\":")
	out.Uint64(uint64(in.Level12Count))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-12-time\":")
	out.Int64(int64(in.Level12Time))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-13-count\":")
	out.Uint64(uint64(in.Level13Count))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-13-time\":")
	out.Int64(int64(in.Level13Time))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-14-count\":")
	out.Uint64(uint64(in.Level14Count))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-14-time\":")
	out.Int64(int64(in.Level14Time))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-15-count\":")
	out.Uint64(uint64(in.Level15Count))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"level-15-time\":")
	out.Int64(int64(in.Level15Time))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v _TimesCPUStatInterrupt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v _TimesCPUStatInterrupt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *_TimesCPUStatInterrupt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *_TimesCPUStatInterrupt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu9(l, v)
}
func easyjson1b73ba79DecodeGithubComShirouGopsutilCpu10(in *jlexer.Lexer, out *TimesZoneStat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "zonename":
			out.Name = string(in.String())
		case "avenrun_1min":
			out.AvgRunQueue1Min = uint32(in.Uint32())
		case "avenrun_5min":
			out.AvgRunQueue5Min = uint32(in.Uint32())
		case "avenrun_15min":
			out.AvgRunQueue15Min = uint32(in.Uint32())
		case "boot_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BootTime).UnmarshalJSON(data))
			}
		case "crtime":
			out.CreateTime = float64(in.Float64())
		case "forkfail_cap":
			out.ForkFailCap = uint64(in.Uint64())
		case "forkfail_misc":
			out.ForkFailMisc = uint64(in.Uint64())
		case "forkfail_nomem":
			out.ForkFailNoMem = uint64(in.Uint64())
		case "forkfail_noproc":
			out.ForkFailNoProc = uint64(in.Uint64())
		case "init_pid":
			out.InitPID = uint(in.Uint())
		case "mapfail_seglim":
			out.MapFailSegLimit = uint(in.Uint())
		case "nested_interp":
			out.NestedInterp = uint(in.Uint())
		case "nsec_sys":
			out.SysTime = time.Duration(in.Int64())
		case "nsec_user":
			out.UserTime = time.Duration(in.Int64())
		case "nsec_waitrq":
			out.WaitIRQTime = time.Duration(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b73ba79EncodeGithubComShirouGopsutilCpu10(out *jwriter.Writer, in TimesZoneStat) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"zonename\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"avenrun_1min\":")
	out.Uint32(uint32(in.AvgRunQueue1Min))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"avenrun_5min\":")
	out.Uint32(uint32(in.AvgRunQueue5Min))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"avenrun_15min\":")
	out.Uint32(uint32(in.AvgRunQueue15Min))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"boot_time\":")
	out.Raw((in.BootTime).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"crtime\":")
	out.Float64(float64(in.CreateTime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"forkfail_cap\":")
	out.Uint64(uint64(in.ForkFailCap))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"forkfail_misc\":")
	out.Uint64(uint64(in.ForkFailMisc))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"forkfail_nomem\":")
	out.Uint64(uint64(in.ForkFailNoMem))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"forkfail_noproc\":")
	out.Uint64(uint64(in.ForkFailNoProc))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"init_pid\":")
	out.Uint(uint(in.InitPID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mapfail_seglim\":")
	out.Uint(uint(in.MapFailSegLimit))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nested_interp\":")
	out.Uint(uint(in.NestedInterp))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nsec_sys\":")
	out.Int64(int64(in.SysTime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nsec_user\":")
	out.Int64(int64(in.UserTime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nsec_waitrq\":")
	out.Int64(int64(in.WaitIRQTime))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TimesZoneStat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TimesZoneStat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TimesZoneStat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TimesZoneStat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu10(l, v)
}
func easyjson1b73ba79DecodeGithubComShirouGopsutilCpu11(in *jlexer.Lexer, out *TimesCPUStatVM) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CPUID":
			out.CPUID = uint(in.Uint())
		case "as_fault":
			out.ASMinorPageFault = uint64(in.Uint64())
		case "anonfree":
			out.AnonPagesFreed = uint64(in.Uint64())
		case "anonpgin":
			out.AnonPagesPagedIn = uint64(in.Uint64())
		case "anonpgout":
			out.AnonPagesPagedOut = uint64(in.Uint64())
		case "cow_fault":
			out.COWFaults = uint64(in.Uint64())
		case "execfree":
			out.ExecPagesFreed = uint64(in.Uint64())
		case "execpgin":
			out.ExecPagesPagedIn = uint64(in.Uint64())
		case "execpgout":
			out.ExecPagesPagedOut = uint64(in.Uint64())
		case "fsfree":
			out.FSPagesFreed = uint64(in.Uint64())
		case "fspgin":
			out.FSPagesPagedIn = uint64(in.Uint64())
		case "fspgout":
			out.FSPagesPagedOut = uint64(in.Uint64())
		case "hat_fault":
			out.HATMinorPageFaults = uint64(in.Uint64())
		case "kernel_asflt":
			out.KernelASFaults = uint64(in.Uint64())
		case "maj_fault":
			out.MajorPageFaults = uint64(in.Uint64())
		case "rev":
			out.PageDaemonHandRevolutions = uint64(in.Uint64())
		case "scan":
			out.PageDaemonPagesScanned = uint64(in.Uint64())
		case "pgfrec":
			out.PageFreeListReclaims = uint64(in.Uint64())
		case "pgin":
			out.PageIns = uint64(in.Uint64())
		case "pgout":
			out.PageOuts = uint64(in.Uint64())
		case "pgrrun":
			out.PagerScheduled = uint64(in.Uint64())
		case "dfree":
			out.PagesFreed = uint64(in.Uint64())
		case "pgpgin":
			out.PagesPagedIn = uint64(in.Uint64())
		case "pgpgout":
			out.PagesPagedOut = uint64(in.Uint64())
		case "pgrec":
			out.PagesReclaimed = uint64(in.Uint64())
		case "pgswapin":
			out.PagesSwappedIn = uint64(in.Uint64())
		case "pgswapout":
			out.PagesSwappedOut = uint64(in.Uint64())
		case "zfod":
			out.PagesZeroFilledOnDemand = uint64(in.Uint64())
		case "prot_fault":
			out.ProtectionFaults = uint64(in.Uint64())
		case "softlock":
			out.SoftwareLockFaults = uint64(in.Uint64())
		case "swapin":
			out.SwapIns = uint64(in.Uint64())
		case "swapout":
			out.SwapOuts = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b73ba79EncodeGithubComShirouGopsutilCpu11(out *jwriter.Writer, in TimesCPUStatVM) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"CPUID\":")
	out.Uint(uint(in.CPUID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"as_fault\":")
	out.Uint64(uint64(in.ASMinorPageFault))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"anonfree\":")
	out.Uint64(uint64(in.AnonPagesFreed))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"anonpgin\":")
	out.Uint64(uint64(in.AnonPagesPagedIn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"anonpgout\":")
	out.Uint64(uint64(in.AnonPagesPagedOut))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cow_fault\":")
	out.Uint64(uint64(in.COWFaults))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"execfree\":")
	out.Uint64(uint64(in.ExecPagesFreed))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"execpgin\":")
	out.Uint64(uint64(in.ExecPagesPagedIn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"execpgout\":")
	out.Uint64(uint64(in.ExecPagesPagedOut))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fsfree\":")
	out.Uint64(uint64(in.FSPagesFreed))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fspgin\":")
	out.Uint64(uint64(in.FSPagesPagedIn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fspgout\":")
	out.Uint64(uint64(in.FSPagesPagedOut))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hat_fault\":")
	out.Uint64(uint64(in.HATMinorPageFaults))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"kernel_asflt\":")
	out.Uint64(uint64(in.KernelASFaults))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"maj_fault\":")
	out.Uint64(uint64(in.MajorPageFaults))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rev\":")
	out.Uint64(uint64(in.PageDaemonHandRevolutions))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"scan\":")
	out.Uint64(uint64(in.PageDaemonPagesScanned))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgfrec\":")
	out.Uint64(uint64(in.PageFreeListReclaims))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgin\":")
	out.Uint64(uint64(in.PageIns))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgout\":")
	out.Uint64(uint64(in.PageOuts))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgrrun\":")
	out.Uint64(uint64(in.PagerScheduled))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"dfree\":")
	out.Uint64(uint64(in.PagesFreed))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgpgin\":")
	out.Uint64(uint64(in.PagesPagedIn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgpgout\":")
	out.Uint64(uint64(in.PagesPagedOut))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgrec\":")
	out.Uint64(uint64(in.PagesReclaimed))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgswapin\":")
	out.Uint64(uint64(in.PagesSwappedIn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgswapout\":")
	out.Uint64(uint64(in.PagesSwappedOut))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"zfod\":")
	out.Uint64(uint64(in.PagesZeroFilledOnDemand))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"prot_fault\":")
	out.Uint64(uint64(in.ProtectionFaults))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"softlock\":")
	out.Uint64(uint64(in.SoftwareLockFaults))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"swapin\":")
	out.Uint64(uint64(in.SwapIns))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"swapout\":")
	out.Uint64(uint64(in.SwapOuts))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TimesCPUStatVM) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TimesCPUStatVM) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TimesCPUStatVM) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TimesCPUStatVM) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu11(l, v)
}
func easyjson1b73ba79DecodeGithubComShirouGopsutilCpu12(in *jlexer.Lexer, out *TimesCPUStatSys) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CPUID":
			out.CPUID = uint(in.Uint())
		case "bawrite":
			out.BAWrite = uint64(in.Uint64())
		case "bread":
			out.BRead = uint64(in.Uint64())
		case "bwrite":
			out.BWrite = uint64(in.Uint64())
		case "readch":
			out.BytesReadRDRW = uint64(in.Uint64())
		case "canch":
			out.CAnch = uint64(in.Uint64())
		case "cpu_load_intr":
			out.CPULoadInter = uint64(in.Uint64())
		case "cpumigrate":
			out.CPUTMigrate = uint64(in.Uint64())
		case "cpu_ticks_idle":
			out.CPUTicksIdle = uint64(in.Uint64())
		case "cpu_ticks_kernel":
			out.CPUTicksKernel = uint64(in.Uint64())
		case "cpu_ticks_user":
			out.CPUTicksUser = uint64(in.Uint64())
		case "cpu_ticks_wait":
			out.CPUTicksWait = uint64(in.Uint64())
		case "cpu_nsec_dtrace":
			out.CPUTimeDTrace = time.Duration(in.Int64())
		case "cpu_nsec_idle":
			out.CPUTimeIdle = time.Duration(in.Int64())
		case "cpu_nsec_intr":
			out.CPUTimeIntr = time.Duration(in.Int64())
		case "cpu_nsec_kernel":
			out.CPUTimeKernel = time.Duration(in.Int64())
		case "cpu_nsec_user":
			out.CPUTimeUser = time.Duration(in.Int64())
		case "wait_ticks_io":
			out.CPUWaitIOTicks = uint64(in.Uint64())
		case "pswitch":
			out.ContextSwitches = uint64(in.Uint64())
		case "dtrace_probes":
			out.DTraceProbes = uint64(in.Uint64())
		case "intr":
			out.DeviceInterrupts = uint64(in.Uint64())
		case "iowait":
			out.IOWait = uint64(in.Uint64())
		case "idlethread":
			out.IdleThread = uint64(in.Uint64())
		case "intrblk":
			out.InterruptBlocked = uint64(in.Uint64())
		case "intrthread":
			out.InterruptThread = uint64(in.Uint64())
		case "intrunpin":
			out.InterruptUnpin = uint64(in.Uint64())
		case "inv_swtch":
			out.InvoluntaryCtxtSwitches = uint64(in.Uint64())
		case "lread":
			out.LogicalBlockReads = uint64(in.Uint64())
		case "lwrite":
			out.LogicalBlockWrites = uint64(in.Uint64())
		case "modload":
			out.ModuleLoaded = uint64(in.Uint64())
		case "modunload":
			out.ModuleUnloaded = uint64(in.Uint64())
		case "msg":
			out.MsgCount = uint64(in.Uint64())
		case "mutex_adenters":
			out.MutexFailedAdaptiveEnters = uint64(in.Uint64())
		case "namei":
			out.PathnameLookups = uint64(in.Uint64())
		case "phread":
			out.PhysicalReads = uint64(in.Uint64())
		case "phwrite":
			out.PhysicalWrites = uint64(in.Uint64())
		case "procovf":
			out.ProcTableOverflows = uint64(in.Uint64())
		case "writech":
			out.RDRWBytes = uint64(in.Uint64())
		case "rw_rdfails":
			out.RWLockReadFails = uint64(in.Uint64())
		case "rw_wrfails":
			out.RWLockWriteFails = uint64(in.Uint64())
		case "sema":
			out.SemaphoreOpsCount = uint64(in.Uint64())
		case "syscall":
			out.SystemCalls = uint64(in.Uint64())
		case "sysexec":
			out.SystemExecs = uint64(in.Uint64())
		case "sysfork":
			out.SystemForks = uint64(in.Uint64())
		case "sysread":
			out.SystemReads = uint64(in.Uint64())
		case "sysvfork":
			out.SystemVForks = uint64(in.Uint64())
		case "syswrite":
			out.SystemWrites = uint64(in.Uint64())
		case "rawch":
			out.TerminalInputCharacters = uint64(in.Uint64())
		case "outch":
			out.TerminalOutCharacters = uint64(in.Uint64())
		case "nthreads":
			out.ThreadsCreated = uint64(in.Uint64())
		case "trap":
			out.Traps = uint64(in.Uint64())
		case "ufsdirblk":
			out.UFSDirBlocksRead = uint64(in.Uint64())
		case "ufsiget":
			out.UFSINodeGets = uint64(in.Uint64())
		case "ufsinopage":
			out.UFSINodeNoPages = uint64(in.Uint64())
		case "ufsipage":
			out.UFSINodePage = uint64(in.Uint64())
		case "xcalls":
			out.XCalls = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b73ba79EncodeGithubComShirouGopsutilCpu12(out *jwriter.Writer, in TimesCPUStatSys) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"CPUID\":")
	out.Uint(uint(in.CPUID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bawrite\":")
	out.Uint64(uint64(in.BAWrite))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bread\":")
	out.Uint64(uint64(in.BRead))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bwrite\":")
	out.Uint64(uint64(in.BWrite))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"readch\":")
	out.Uint64(uint64(in.BytesReadRDRW))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"canch\":")
	out.Uint64(uint64(in.CAnch))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_load_intr\":")
	out.Uint64(uint64(in.CPULoadInter))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpumigrate\":")
	out.Uint64(uint64(in.CPUTMigrate))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_ticks_idle\":")
	out.Uint64(uint64(in.CPUTicksIdle))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_ticks_kernel\":")
	out.Uint64(uint64(in.CPUTicksKernel))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_ticks_user\":")
	out.Uint64(uint64(in.CPUTicksUser))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_ticks_wait\":")
	out.Uint64(uint64(in.CPUTicksWait))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_nsec_dtrace\":")
	out.Int64(int64(in.CPUTimeDTrace))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_nsec_idle\":")
	out.Int64(int64(in.CPUTimeIdle))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_nsec_intr\":")
	out.Int64(int64(in.CPUTimeIntr))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_nsec_kernel\":")
	out.Int64(int64(in.CPUTimeKernel))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_nsec_user\":")
	out.Int64(int64(in.CPUTimeUser))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"wait_ticks_io\":")
	out.Uint64(uint64(in.CPUWaitIOTicks))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pswitch\":")
	out.Uint64(uint64(in.ContextSwitches))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"dtrace_probes\":")
	out.Uint64(uint64(in.DTraceProbes))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"intr\":")
	out.Uint64(uint64(in.DeviceInterrupts))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"iowait\":")
	out.Uint64(uint64(in.IOWait))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"idlethread\":")
	out.Uint64(uint64(in.IdleThread))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"intrblk\":")
	out.Uint64(uint64(in.InterruptBlocked))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"intrthread\":")
	out.Uint64(uint64(in.InterruptThread))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"intrunpin\":")
	out.Uint64(uint64(in.InterruptUnpin))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"inv_swtch\":")
	out.Uint64(uint64(in.InvoluntaryCtxtSwitches))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lread\":")
	out.Uint64(uint64(in.LogicalBlockReads))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lwrite\":")
	out.Uint64(uint64(in.LogicalBlockWrites))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"modload\":")
	out.Uint64(uint64(in.ModuleLoaded))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"modunload\":")
	out.Uint64(uint64(in.ModuleUnloaded))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"msg\":")
	out.Uint64(uint64(in.MsgCount))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mutex_adenters\":")
	out.Uint64(uint64(in.MutexFailedAdaptiveEnters))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"namei\":")
	out.Uint64(uint64(in.PathnameLookups))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"phread\":")
	out.Uint64(uint64(in.PhysicalReads))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"phwrite\":")
	out.Uint64(uint64(in.PhysicalWrites))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"procovf\":")
	out.Uint64(uint64(in.ProcTableOverflows))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"writech\":")
	out.Uint64(uint64(in.RDRWBytes))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rw_rdfails\":")
	out.Uint64(uint64(in.RWLockReadFails))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rw_wrfails\":")
	out.Uint64(uint64(in.RWLockWriteFails))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sema\":")
	out.Uint64(uint64(in.SemaphoreOpsCount))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"syscall\":")
	out.Uint64(uint64(in.SystemCalls))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sysexec\":")
	out.Uint64(uint64(in.SystemExecs))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sysfork\":")
	out.Uint64(uint64(in.SystemForks))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sysread\":")
	out.Uint64(uint64(in.SystemReads))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sysvfork\":")
	out.Uint64(uint64(in.SystemVForks))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"syswrite\":")
	out.Uint64(uint64(in.SystemWrites))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rawch\":")
	out.Uint64(uint64(in.TerminalInputCharacters))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"outch\":")
	out.Uint64(uint64(in.TerminalOutCharacters))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nthreads\":")
	out.Uint64(uint64(in.ThreadsCreated))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"trap\":")
	out.Uint64(uint64(in.Traps))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ufsdirblk\":")
	out.Uint64(uint64(in.UFSDirBlocksRead))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ufsiget\":")
	out.Uint64(uint64(in.UFSINodeGets))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ufsinopage\":")
	out.Uint64(uint64(in.UFSINodeNoPages))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ufsipage\":")
	out.Uint64(uint64(in.UFSINodePage))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"xcalls\":")
	out.Uint64(uint64(in.XCalls))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TimesCPUStatSys) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TimesCPUStatSys) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TimesCPUStatSys) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TimesCPUStatSys) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu12(l, v)
}
func easyjson1b73ba79DecodeGithubComShirouGopsutilCpu13(in *jlexer.Lexer, out *TimesCPUStat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CPUID":
			out.CPUID = uint(in.Uint())
		case "as_fault":
			out.ASMinorPageFault = uint64(in.Uint64())
		case "anonfree":
			out.AnonPagesFreed = uint64(in.Uint64())
		case "anonpgin":
			out.AnonPagesPagedIn = uint64(in.Uint64())
		case "anonpgout":
			out.AnonPagesPagedOut = uint64(in.Uint64())
		case "cow_fault":
			out.COWFaults = uint64(in.Uint64())
		case "execfree":
			out.ExecPagesFreed = uint64(in.Uint64())
		case "execpgin":
			out.ExecPagesPagedIn = uint64(in.Uint64())
		case "execpgout":
			out.ExecPagesPagedOut = uint64(in.Uint64())
		case "fsfree":
			out.FSPagesFreed = uint64(in.Uint64())
		case "fspgin":
			out.FSPagesPagedIn = uint64(in.Uint64())
		case "fspgout":
			out.FSPagesPagedOut = uint64(in.Uint64())
		case "hat_fault":
			out.HATMinorPageFaults = uint64(in.Uint64())
		case "kernel_asflt":
			out.KernelASFaults = uint64(in.Uint64())
		case "maj_fault":
			out.MajorPageFaults = uint64(in.Uint64())
		case "rev":
			out.PageDaemonHandRevolutions = uint64(in.Uint64())
		case "scan":
			out.PageDaemonPagesScanned = uint64(in.Uint64())
		case "pgfrec":
			out.PageFreeListReclaims = uint64(in.Uint64())
		case "pgin":
			out.PageIns = uint64(in.Uint64())
		case "pgout":
			out.PageOuts = uint64(in.Uint64())
		case "pgrrun":
			out.PagerScheduled = uint64(in.Uint64())
		case "dfree":
			out.PagesFreed = uint64(in.Uint64())
		case "pgpgin":
			out.PagesPagedIn = uint64(in.Uint64())
		case "pgpgout":
			out.PagesPagedOut = uint64(in.Uint64())
		case "pgrec":
			out.PagesReclaimed = uint64(in.Uint64())
		case "pgswapin":
			out.PagesSwappedIn = uint64(in.Uint64())
		case "pgswapout":
			out.PagesSwappedOut = uint64(in.Uint64())
		case "zfod":
			out.PagesZeroFilledOnDemand = uint64(in.Uint64())
		case "prot_fault":
			out.ProtectionFaults = uint64(in.Uint64())
		case "softlock":
			out.SoftwareLockFaults = uint64(in.Uint64())
		case "swapin":
			out.SwapIns = uint64(in.Uint64())
		case "swapout":
			out.SwapOuts = uint64(in.Uint64())
		case "bawrite":
			out.BAWrite = uint64(in.Uint64())
		case "bread":
			out.BRead = uint64(in.Uint64())
		case "bwrite":
			out.BWrite = uint64(in.Uint64())
		case "readch":
			out.BytesReadRDRW = uint64(in.Uint64())
		case "canch":
			out.CAnch = uint64(in.Uint64())
		case "cpu_load_intr":
			out.CPULoadInter = uint64(in.Uint64())
		case "cpumigrate":
			out.CPUTMigrate = uint64(in.Uint64())
		case "cpu_ticks_idle":
			out.CPUTicksIdle = uint64(in.Uint64())
		case "cpu_ticks_kernel":
			out.CPUTicksKernel = uint64(in.Uint64())
		case "cpu_ticks_user":
			out.CPUTicksUser = uint64(in.Uint64())
		case "cpu_ticks_wait":
			out.CPUTicksWait = uint64(in.Uint64())
		case "cpu_nsec_dtrace":
			out.CPUTimeDTrace = time.Duration(in.Int64())
		case "cpu_nsec_idle":
			out.CPUTimeIdle = time.Duration(in.Int64())
		case "cpu_nsec_intr":
			out.CPUTimeIntr = time.Duration(in.Int64())
		case "cpu_nsec_kernel":
			out.CPUTimeKernel = time.Duration(in.Int64())
		case "cpu_nsec_user":
			out.CPUTimeUser = time.Duration(in.Int64())
		case "wait_ticks_io":
			out.CPUWaitIOTicks = uint64(in.Uint64())
		case "pswitch":
			out.ContextSwitches = uint64(in.Uint64())
		case "dtrace_probes":
			out.DTraceProbes = uint64(in.Uint64())
		case "intr":
			out.DeviceInterrupts = uint64(in.Uint64())
		case "iowait":
			out.IOWait = uint64(in.Uint64())
		case "idlethread":
			out.IdleThread = uint64(in.Uint64())
		case "intrblk":
			out.InterruptBlocked = uint64(in.Uint64())
		case "intrthread":
			out.InterruptThread = uint64(in.Uint64())
		case "intrunpin":
			out.InterruptUnpin = uint64(in.Uint64())
		case "inv_swtch":
			out.InvoluntaryCtxtSwitches = uint64(in.Uint64())
		case "lread":
			out.LogicalBlockReads = uint64(in.Uint64())
		case "lwrite":
			out.LogicalBlockWrites = uint64(in.Uint64())
		case "modload":
			out.ModuleLoaded = uint64(in.Uint64())
		case "modunload":
			out.ModuleUnloaded = uint64(in.Uint64())
		case "msg":
			out.MsgCount = uint64(in.Uint64())
		case "mutex_adenters":
			out.MutexFailedAdaptiveEnters = uint64(in.Uint64())
		case "namei":
			out.PathnameLookups = uint64(in.Uint64())
		case "phread":
			out.PhysicalReads = uint64(in.Uint64())
		case "phwrite":
			out.PhysicalWrites = uint64(in.Uint64())
		case "procovf":
			out.ProcTableOverflows = uint64(in.Uint64())
		case "writech":
			out.RDRWBytes = uint64(in.Uint64())
		case "rw_rdfails":
			out.RWLockReadFails = uint64(in.Uint64())
		case "rw_wrfails":
			out.RWLockWriteFails = uint64(in.Uint64())
		case "sema":
			out.SemaphoreOpsCount = uint64(in.Uint64())
		case "syscall":
			out.SystemCalls = uint64(in.Uint64())
		case "sysexec":
			out.SystemExecs = uint64(in.Uint64())
		case "sysfork":
			out.SystemForks = uint64(in.Uint64())
		case "sysread":
			out.SystemReads = uint64(in.Uint64())
		case "sysvfork":
			out.SystemVForks = uint64(in.Uint64())
		case "syswrite":
			out.SystemWrites = uint64(in.Uint64())
		case "rawch":
			out.TerminalInputCharacters = uint64(in.Uint64())
		case "outch":
			out.TerminalOutCharacters = uint64(in.Uint64())
		case "nthreads":
			out.ThreadsCreated = uint64(in.Uint64())
		case "trap":
			out.Traps = uint64(in.Uint64())
		case "ufsdirblk":
			out.UFSDirBlocksRead = uint64(in.Uint64())
		case "ufsiget":
			out.UFSINodeGets = uint64(in.Uint64())
		case "ufsinopage":
			out.UFSINodeNoPages = uint64(in.Uint64())
		case "ufsipage":
			out.UFSINodePage = uint64(in.Uint64())
		case "xcalls":
			out.XCalls = uint64(in.Uint64())
		case "PIL":
			if in.IsNull() {
				in.Skip()
				out.PIL = nil
			} else {
				in.Delim('[')
				if out.PIL == nil {
					if !in.IsDelim(']') {
						out.PIL = make([]TimesCPUStatInterruptLevel, 0, 4)
					} else {
						out.PIL = []TimesCPUStatInterruptLevel{}
					}
				} else {
					out.PIL = (out.PIL)[:0]
				}
				for !in.IsDelim(']') {
					var v13 TimesCPUStatInterruptLevel
					easyjson1b73ba79DecodeGithubComShirouGopsutilCpu14(in, &v13)
					out.PIL = append(out.PIL, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b73ba79EncodeGithubComShirouGopsutilCpu13(out *jwriter.Writer, in TimesCPUStat) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"CPUID\":")
	out.Uint(uint(in.CPUID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"as_fault\":")
	out.Uint64(uint64(in.ASMinorPageFault))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"anonfree\":")
	out.Uint64(uint64(in.AnonPagesFreed))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"anonpgin\":")
	out.Uint64(uint64(in.AnonPagesPagedIn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"anonpgout\":")
	out.Uint64(uint64(in.AnonPagesPagedOut))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cow_fault\":")
	out.Uint64(uint64(in.COWFaults))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"execfree\":")
	out.Uint64(uint64(in.ExecPagesFreed))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"execpgin\":")
	out.Uint64(uint64(in.ExecPagesPagedIn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"execpgout\":")
	out.Uint64(uint64(in.ExecPagesPagedOut))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fsfree\":")
	out.Uint64(uint64(in.FSPagesFreed))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fspgin\":")
	out.Uint64(uint64(in.FSPagesPagedIn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fspgout\":")
	out.Uint64(uint64(in.FSPagesPagedOut))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hat_fault\":")
	out.Uint64(uint64(in.HATMinorPageFaults))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"kernel_asflt\":")
	out.Uint64(uint64(in.KernelASFaults))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"maj_fault\":")
	out.Uint64(uint64(in.MajorPageFaults))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rev\":")
	out.Uint64(uint64(in.PageDaemonHandRevolutions))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"scan\":")
	out.Uint64(uint64(in.PageDaemonPagesScanned))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgfrec\":")
	out.Uint64(uint64(in.PageFreeListReclaims))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgin\":")
	out.Uint64(uint64(in.PageIns))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgout\":")
	out.Uint64(uint64(in.PageOuts))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgrrun\":")
	out.Uint64(uint64(in.PagerScheduled))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"dfree\":")
	out.Uint64(uint64(in.PagesFreed))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgpgin\":")
	out.Uint64(uint64(in.PagesPagedIn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgpgout\":")
	out.Uint64(uint64(in.PagesPagedOut))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgrec\":")
	out.Uint64(uint64(in.PagesReclaimed))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgswapin\":")
	out.Uint64(uint64(in.PagesSwappedIn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pgswapout\":")
	out.Uint64(uint64(in.PagesSwappedOut))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"zfod\":")
	out.Uint64(uint64(in.PagesZeroFilledOnDemand))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"prot_fault\":")
	out.Uint64(uint64(in.ProtectionFaults))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"softlock\":")
	out.Uint64(uint64(in.SoftwareLockFaults))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"swapin\":")
	out.Uint64(uint64(in.SwapIns))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"swapout\":")
	out.Uint64(uint64(in.SwapOuts))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bawrite\":")
	out.Uint64(uint64(in.BAWrite))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bread\":")
	out.Uint64(uint64(in.BRead))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bwrite\":")
	out.Uint64(uint64(in.BWrite))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"readch\":")
	out.Uint64(uint64(in.BytesReadRDRW))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"canch\":")
	out.Uint64(uint64(in.CAnch))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_load_intr\":")
	out.Uint64(uint64(in.CPULoadInter))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpumigrate\":")
	out.Uint64(uint64(in.CPUTMigrate))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_ticks_idle\":")
	out.Uint64(uint64(in.CPUTicksIdle))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_ticks_kernel\":")
	out.Uint64(uint64(in.CPUTicksKernel))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_ticks_user\":")
	out.Uint64(uint64(in.CPUTicksUser))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_ticks_wait\":")
	out.Uint64(uint64(in.CPUTicksWait))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_nsec_dtrace\":")
	out.Int64(int64(in.CPUTimeDTrace))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_nsec_idle\":")
	out.Int64(int64(in.CPUTimeIdle))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_nsec_intr\":")
	out.Int64(int64(in.CPUTimeIntr))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_nsec_kernel\":")
	out.Int64(int64(in.CPUTimeKernel))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_nsec_user\":")
	out.Int64(int64(in.CPUTimeUser))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"wait_ticks_io\":")
	out.Uint64(uint64(in.CPUWaitIOTicks))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pswitch\":")
	out.Uint64(uint64(in.ContextSwitches))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"dtrace_probes\":")
	out.Uint64(uint64(in.DTraceProbes))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"intr\":")
	out.Uint64(uint64(in.DeviceInterrupts))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"iowait\":")
	out.Uint64(uint64(in.IOWait))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"idlethread\":")
	out.Uint64(uint64(in.IdleThread))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"intrblk\":")
	out.Uint64(uint64(in.InterruptBlocked))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"intrthread\":")
	out.Uint64(uint64(in.InterruptThread))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"intrunpin\":")
	out.Uint64(uint64(in.InterruptUnpin))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"inv_swtch\":")
	out.Uint64(uint64(in.InvoluntaryCtxtSwitches))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lread\":")
	out.Uint64(uint64(in.LogicalBlockReads))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lwrite\":")
	out.Uint64(uint64(in.LogicalBlockWrites))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"modload\":")
	out.Uint64(uint64(in.ModuleLoaded))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"modunload\":")
	out.Uint64(uint64(in.ModuleUnloaded))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"msg\":")
	out.Uint64(uint64(in.MsgCount))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mutex_adenters\":")
	out.Uint64(uint64(in.MutexFailedAdaptiveEnters))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"namei\":")
	out.Uint64(uint64(in.PathnameLookups))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"phread\":")
	out.Uint64(uint64(in.PhysicalReads))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"phwrite\":")
	out.Uint64(uint64(in.PhysicalWrites))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"procovf\":")
	out.Uint64(uint64(in.ProcTableOverflows))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"writech\":")
	out.Uint64(uint64(in.RDRWBytes))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rw_rdfails\":")
	out.Uint64(uint64(in.RWLockReadFails))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rw_wrfails\":")
	out.Uint64(uint64(in.RWLockWriteFails))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sema\":")
	out.Uint64(uint64(in.SemaphoreOpsCount))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"syscall\":")
	out.Uint64(uint64(in.SystemCalls))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sysexec\":")
	out.Uint64(uint64(in.SystemExecs))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sysfork\":")
	out.Uint64(uint64(in.SystemForks))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sysread\":")
	out.Uint64(uint64(in.SystemReads))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sysvfork\":")
	out.Uint64(uint64(in.SystemVForks))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"syswrite\":")
	out.Uint64(uint64(in.SystemWrites))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rawch\":")
	out.Uint64(uint64(in.TerminalInputCharacters))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"outch\":")
	out.Uint64(uint64(in.TerminalOutCharacters))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nthreads\":")
	out.Uint64(uint64(in.ThreadsCreated))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"trap\":")
	out.Uint64(uint64(in.Traps))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ufsdirblk\":")
	out.Uint64(uint64(in.UFSDirBlocksRead))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ufsiget\":")
	out.Uint64(uint64(in.UFSINodeGets))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ufsinopage\":")
	out.Uint64(uint64(in.UFSINodeNoPages))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ufsipage\":")
	out.Uint64(uint64(in.UFSINodePage))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"xcalls\":")
	out.Uint64(uint64(in.XCalls))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"PIL\":")
	if in.PIL == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v14, v15 := range in.PIL {
			if v14 > 0 {
				out.RawByte(',')
			}
			easyjson1b73ba79EncodeGithubComShirouGopsutilCpu14(out, v15)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TimesCPUStat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TimesCPUStat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b73ba79EncodeGithubComShirouGopsutilCpu13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TimesCPUStat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TimesCPUStat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b73ba79DecodeGithubComShirouGopsutilCpu13(l, v)
}
func easyjson1b73ba79DecodeGithubComShirouGopsutilCpu14(in *jlexer.Lexer, out *TimesCPUStatInterruptLevel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Count":
			out.Count = uint64(in.Uint64())
		case "Time":
			out.Time = time.Duration(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b73ba79EncodeGithubComShirouGopsutilCpu14(out *jwriter.Writer, in TimesCPUStatInterruptLevel) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Count\":")
	out.Uint64(uint64(in.Count))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Time\":")
	out.Int64(int64(in.Time))
	out.RawByte('}')
}
